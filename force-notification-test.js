const axios = require('axios');
const { Seller, Product } = require('./src/models');

const BASE_URL = 'http://localhost:3001';

async function forceNotificationTest() {
  try {
    console.log('üöÄ Test forc√© de notification en temps r√©el...');
    
    // 1. V√©rifier Mamadou Ba
    const mamadou = await Seller.findByPk(2);
    console.log('‚úÖ Mamadou Ba:', mamadou.name);
    console.log('üîó Link ID:', mamadou.public_link_id);
    
    // 2. V√©rifier ses produits
    const products = await Product.findAll({
      where: { seller_id: mamadou.id },
      order: [['created_at', 'DESC']],
      limit: 1
    });
    
    if (products.length === 0) {
      console.log('‚ùå Aucun produit trouv√© pour Mamadou Ba');
      return;
    }
    
    const product = products[0];
    console.log('üì¶ Produit utilis√©:', product.name, '(ID:', product.id, ')');
    
    // 3. Cr√©er une commande via l'API publique (simulation client)
    console.log('\nüõí Cr√©ation d\'une commande via l\'API publique...');
    const orderData = {
      customer_name: 'Client Test Notification',
      customer_phone: '+2250701234567',
      customer_address: 'Adresse Test Notification',
      payment_method: 'cash',
      product_id: product.id,
      quantity: 1
    };
    
    try {
      const response = await axios.post(`${BASE_URL}/api/public/${mamadou.public_link_id}/orders`, orderData);
      
      if (response.status === 201) {
        const order = response.data;
        console.log('‚úÖ Commande cr√©√©e via API:', order.id);
        console.log('üì¶ Notification envoy√©e: Oui');
        
        // 4. Attendre un peu pour que la notification soit trait√©e
        console.log('\n‚è≥ Attente de traitement de la notification...');
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // 5. V√©rifier les notifications en base
        console.log('\nüìä V√©rification des notifications en base...');
        const { Notification } = require('./src/models');
        
        const notifications = await Notification.findAll({
          where: { 
            seller_id: mamadou.id,
            type: 'new_order'
          },
          order: [['created_at', 'DESC']],
          limit: 3
        });
        
        console.log(`üì¶ ${notifications.length} notification(s) trouv√©e(s):`);
        notifications.forEach((notif, index) => {
          console.log(`\n${index + 1}. Notification:`);
          console.log(`   - ID: ${notif.id}`);
          console.log(`   - Type: ${notif.type}`);
          console.log(`   - Titre: ${notif.title}`);
          console.log(`   - Message: ${notif.message}`);
          console.log(`   - Envoy√©e: ${notif.sent ? 'Oui' : 'Non'}`);
          console.log(`   - Cr√©√©e: ${notif.created_at}`);
        });
        
        console.log('\nüéØ INSTRUCTIONS POUR L\'UTILISATEUR:');
        console.log('============================================================');
        console.log('1. Assurez-vous que l\'app mobile est ouverte et connect√©e');
        console.log('2. V√©rifiez dans la console que vous voyez "WebSocket connect√©"');
        console.log('3. Si vous ne voyez pas la notification, rechargez la page (F5)');
        console.log('4. La notification devrait appara√Ætre en temps r√©el!');
        console.log('============================================================');
        
      } else {
        console.log('‚ùå Erreur cr√©ation commande:', response.status);
      }
      
    } catch (error) {
      console.error('‚ùå Erreur API:', error.response?.data || error.message);
    }
    
  } catch (error) {
    console.error('‚ùå Erreur test forc√©:', error);
  }
}

// Ex√©cuter le test
forceNotificationTest(); 