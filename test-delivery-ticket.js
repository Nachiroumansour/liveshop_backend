const axios = require('axios');

// Configuration
const BACKEND_URL = 'http://localhost:3001';
const SELLER_LINK_ID = 'qbos55dx';

// Test de cr√©ation de commande puis g√©n√©ration de ticket
const testOrder = {
  product_id: 37, // Sac √† dos urbain (appartient √† Mamadou Ba)
  customer_name: 'Test Livraison',
  customer_phone: '+221771234567',
  customer_address: '123 Rue Test, Dakar',
  quantity: 1,
  payment_method: 'wave'
};

console.log('üß™ Test de g√©n√©ration de ticket de livraison');
console.log('============================================');

async function testDeliveryTicket() {
  try {
    // 1. Cr√©er une commande
    console.log('üì¶ 1. Cr√©ation d\'une commande de test...');
    const orderResponse = await axios.post(
      `${BACKEND_URL}/api/public/${SELLER_LINK_ID}/orders`,
      testOrder,
      {
        headers: {
          'Content-Type': 'application/json'
        }
      }
    );

    const orderId = orderResponse.data.order.id;
    console.log(`‚úÖ Commande cr√©√©e: #${orderId}`);

    // 2. G√©n√©rer un token pour le vendeur
    console.log('üîë 2. G√©n√©ration du token vendeur...');
    const tokenResponse = await axios.post(`${BACKEND_URL}/api/auth/login`, {
      phone_number: '+221772345678',
      pin: '1234'
    });

    const token = tokenResponse.data.token;
    console.log('‚úÖ Token g√©n√©r√©');

    // 3. Tester la g√©n√©ration du ticket PDF
    console.log('üñ®Ô∏è 3. Test de g√©n√©ration du ticket PDF...');
    const pdfResponse = await axios.get(
      `${BACKEND_URL}/api/orders/${orderId}/delivery-ticket`,
      {
        headers: {
          'Authorization': `Bearer ${token}`
        },
        responseType: 'arraybuffer'
      }
    );

    console.log('‚úÖ PDF g√©n√©r√© avec succ√®s');
    console.log(`üìÑ Taille du PDF: ${pdfResponse.data.length} bytes`);

    // 4. Tester l'API des informations de livraison
    console.log('üì± 4. Test de l\'API des informations de livraison...');
    const infoResponse = await axios.get(
      `${BACKEND_URL}/api/orders/${orderId}/delivery-info`
    );

    console.log('‚úÖ Informations de livraison r√©cup√©r√©es');
    console.log('üìã D√©tails de la commande:');
    console.log(`   - Client: ${infoResponse.data.order.customer_name}`);
    console.log(`   - Produit: ${infoResponse.data.order.product?.name}`);
    console.log(`   - Prix: ${infoResponse.data.order.total_price} FCFA`);

    // 5. Afficher l'URL du QR code
    const deliveryUrl = `http://localhost:5173/delivery/${orderId}`;
    console.log('\nüéØ 5. URL du QR code:');
    console.log(`   ${deliveryUrl}`);
    console.log('   üì± Le livreur peut scanner le QR code pour voir les d√©tails complets');

    console.log('\n‚úÖ Test termin√© avec succ√®s !');
    console.log('\nüí° Pour tester compl√®tement:');
    console.log('   1. Connectez-vous dans l\'app mobile vendeur');
    console.log('   2. Cliquez sur "Ticket" pour une commande');
    console.log('   3. Le PDF sera t√©l√©charg√© avec le QR code');
    console.log('   4. Scannez le QR code pour voir la page web');

  } catch (error) {
    console.error('‚ùå Erreur:');
    console.error('Status:', error.response?.status);
    console.error('Message:', error.response?.data);
    
    if (error.response?.data?.error) {
      console.error('Erreur d√©taill√©e:', error.response.data.error);
    }
  }
}

testDeliveryTicket(); 